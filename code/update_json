#!/usr/bin/env python3

import json
import os.path as op

# from neurobagel.schema import NeuroBagelModel?
target = 'Annotations'

import click

@click.command()
@click.argument('infile', type=click.Path(dir_okay=False))
@click.argument('annotated_file', type=click.Path(exists=True, dir_okay=False))
def update_json(infile, annotated_file):
    return do_update_json(infile, annotated_file)

def analyze_struct(bytes_struct):
    # figure out original indentation
    indent = 0
    indent_sym = None
    multiline = False
    newline = None

    for i, line in enumerate(bytes_struct.splitlines(keepends=True)):
        if i:
            multiline = True
        else:
            for e in (b'\r\n', b'\n'):
                if line.endswith(e):
                    newline = e
                    break
        if newline:
            line = line.rstrip(newline)

        line = line.decode('utf-8')
        if not line.startswith('{'):
            for j, s in enumerate(line):
                if s not in (' ', '\t'):
                    break
                if indent_sym is None:
                    indent_sym = s
                if s != indent_sym:
                    raise ValueError(f"Found mixed indentation of tabs and spaces in the line {line!r}")
                indent += 1
            break
    assert indent < 16, f"got indent {indent} using {indent_sym}"

    indent_ = indent_sym * indent if indent_sym else None

    return indent_, multiline, newline

def do_update_json(struct, annotated):

    if isinstance(annotated, dict):
        ann_struct = annotated
    else:
        with open(annotated, 'r', encoding='utf-8') as f:
            ann_struct = json.load(f)

    if struct.startswith('{'):
        in_file = None
        in_struct = json.loads(struct)
        struct_bytes = struct.encode('utf-8')
    elif op.exists(struct):
        in_file = struct
        with open(struct, 'rb') as f:
            struct_bytes = f.read()
        in_struct = json.loads(struct_bytes.decode('utf-8'))

    if in_struct is not None:
        # we care only about Annotations
        indent, multiline, newline = analyze_struct(struct_bytes)

        for k, v in in_struct.items():
            if target in v:
                raise ValueError(f"Input already has {target} value: {v[target]}")
            if target in ann_struct[k]:
                v[target] = ann_struct[k][target]

        for k in ann_struct:
            if k not in in_struct:
                in_struct[k] = ann_struct[k]
    else:
        # if no input -- sensible defaults
        indent = 4  # spaces
        multiline = False
        newline = None  # default

        print(f"No {struct} -- we will produce one from scratch")
        in_struct = ann_struct

    res = json.dumps(in_struct, **(dict(indent=indent) if (indent or multiline) else {}))
    if in_file:
        if newline:
            newline = newline.decode()
        with open(in_file, 'w', encoding='utf-8', newline=newline) as f:
            f.write(res)

        print(f"Finished writing {in_file}")
    return res


def test_1():
    assert do_update_json('{}', {"1":2}) == '{"1": 2}'
    # TODO: add more


if __name__ == '__main__':
    # pytest fails to find them in this non test_ file, so let's just run the tests
    test_1()
    update_json()
