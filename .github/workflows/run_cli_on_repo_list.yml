# This is a reusable workflow that runs the CLI on a provided list of repos, 
# and uploads the JSONLD files along with the CLI log to a branch in neurobagel/openneuro-annotations.
# The workflow updates the sha.txt file for repos on which the CLI ran successfully.
name: Run CLI on repo list

on:
  workflow_call:
    inputs:
      # NOTE: If this input is empty, the workflow should not run
      dataset-list:
        description: "String representing a list of repos to update"
        required: true
        type: string

jobs:
  parse-datasets:
    name: Parse dataset list
    runs-on: ubuntu-latest
    outputs:
      datasets: ${{ steps.parse.outputs.datasets }}
    steps:
      - name: Parse dataset list into matrix
        id: parse
        run: |
          # Convert the multiline dataset list into a JSON array for matrix strategy
          echo "${{ inputs.dataset-list }}" | jq -R -s -c 'split("\n") | map(select(length > 0))' > datasets.json
          echo "datasets=$(cat datasets.json)" >> "$GITHUB_OUTPUT"

  matrix-run-cli:
    name: Run CLI on ${{ matrix.dataset }}
    needs: parse-datasets
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dataset: ${{ fromJson(needs.parse-datasets.outputs.datasets) }}
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.NB_BOT_ID }}
          private-key: ${{ secrets.NB_BOT_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'main'
          token: ${{ steps.generate-token.outputs.token }}
      
      # git-annex is required for datalad
      - name: Install git-annex
        run: |
          sudo apt-get update
          sudo apt-get install git-annex
          echo "git-annex version: $(git-annex version)"
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r code/requirements.txt

      - name: Extract dataset info
        id: dataset-info
        run: |
          # Extract repo name and SHA from the dataset string (format: repo,sha)
          DATASET="${{ matrix.dataset }}"
          REPO=$(echo "$DATASET" | cut -d ',' -f 1)
          SHA=$(echo "$DATASET" | cut -d ',' -f 2 | tr -d '"')
          echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Run CLI on single dataset
        id: run-cli
        working-directory: code
        run: |
          REPO="${{ steps.dataset-info.outputs.repo }}"
          echo "Running CLI on dataset: $REPO"
          ./run_cli_single_dataset.sh "$REPO" 2>&1 | tee "LOG_${REPO}.txt"
          
          # Capture the exit status
          CLI_EXIT_CODE=$?
          echo "exit_code=$CLI_EXIT_CODE" >> "$GITHUB_OUTPUT"
          
          if [ $CLI_EXIT_CODE -eq 0 ]; then
            echo "status=success" >> "$GITHUB_OUTPUT"
            echo "✅ CLI succeeded for $REPO"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            echo "❌ CLI failed for $REPO"
            exit $CLI_EXIT_CODE
          fi

      - name: Upload JSONLD file as artifact
        if: steps.run-cli.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: jsonld-${{ steps.dataset-info.outputs.repo }}
          path: code/data/jsonld/${{ steps.dataset-info.outputs.repo }}.jsonld

      - name: Upload log file as artifact  
        uses: actions/upload-artifact@v4
        with:
          name: cli-log-${{ steps.dataset-info.outputs.repo }}
          path: code/LOG_${{ steps.dataset-info.outputs.repo }}.txt

      - name: Update sha.txt for successful run
        if: steps.run-cli.outputs.status == 'success'
        run: |
          REPO="${{ steps.dataset-info.outputs.repo }}"
          SHA="${{ steps.dataset-info.outputs.sha }}"
          
          # Look for existing SHA for the repo in sha.txt
          old_repo_sha=$(grep "$REPO" code/sha.txt || true)
          
          cd code
          if [ ! -z "$old_repo_sha" ]; then
            echo "Updating SHA for $REPO in sha.txt"
            sed -i "s/${old_repo_sha}/${REPO},${SHA}/" sha.txt
          else
            echo "Adding new SHA entry for $REPO in sha.txt" 
            echo "${REPO},${SHA}" >> sha.txt
          fi

  consolidate-results:
    name: Consolidate results and update sha.txt
    needs: [parse-datasets, matrix-run-cli]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.NB_BOT_ID }}
          private-key: ${{ secrets.NB_BOT_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'main'
          token: ${{ steps.generate-token.outputs.token }}

      - name: Download all JSONLD artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: jsonld-*
          path: code/data/jsonld
          merge-multiple: true

      - name: Download all log artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: cli-log-*
          path: code/logs
          merge-multiple: true

      - name: Consolidate logs
        working-directory: code
        run: |
          # Create a consolidated log file
          echo "=== Consolidated CLI Execution Log ===" > LOG.txt
          echo "Generated at: $(date)" >> LOG.txt
          echo "" >> LOG.txt
          
          for log_file in logs/LOG_*.txt; do
            if [ -f "$log_file" ]; then
              dataset=$(basename "$log_file" .txt | sed 's/LOG_//')
              echo "=== Dataset: $dataset ===" >> LOG.txt
              cat "$log_file" >> LOG.txt
              echo "" >> LOG.txt
            fi
          done

      - name: Commit and push updated sha.txt file
        run: |
          if ! git diff --quiet code/sha.txt; then
            git config user.name "GitHub Actions Bot"
            git config user.email "<>"
            git add code/sha.txt
            git commit -m "[bot] Update record of repo SHAs (matrix execution)"
            git push origin main
          fi

  push-updated-files:
    name: Push updated JSONLD files
    runs-on: ubuntu-latest
    needs: batch-run-cli

    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.NB_BOT_ID }}
          private-key: ${{ secrets.NB_BOT_KEY }}
          # See https://github.com/actions/create-github-app-token?tab=readme-ov-file#create-a-token-for-all-repositories-in-another-owners-installation
          owner: neurobagel

      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'neurobagel/openneuro-annotations'
          ref: 'auto-update-jsonlds'
          token: ${{ steps.generate-token.outputs.token }}

      - name: Clear existing jsonld files
        run: rm -f jsonld/*

      - name: Download JSONLD files artifact
        uses: actions/download-artifact@v4
        with:
          name: jsonld-files
          path: jsonld

      - name: Download CLI log artifact
        uses: actions/download-artifact@v4
        with:
          name: cli-log-file
          # NOTE: Path must be a directory, not a file
          path: jsonld
      
      # Configure git to use the GitHub App's bot user
      # https://github.com/actions/create-github-app-token?tab=readme-ov-file#configure-git-cli-for-an-apps-bot-user
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.generate-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
    
      - name: Configure git
        run: |
          git config --global user.name '${{ steps.generate-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.generate-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Commit and push updated JSONLD files
        # TODO: If there are no JSONLD files to update, skip this step
        run: |
          git add -A jsonld/*
          git commit -m "[bot] Update JSONLD files and CLI log"
          git push origin auto-update-jsonlds
